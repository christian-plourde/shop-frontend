{"version":3,"sources":["components/productCard.jsx","LandingPage.js","serviceWorker.js","index.js"],"names":["ProductCard","state","quantity","handleIncrement","setState","handleDecrement","className","href","src","alt","onClick","this","disabled","type","value","Component","LandingPage","data","fetch","headers","then","response","json","productData","console","log","catch","error","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gSA2CeA,G,uNAtCZC,MAAQ,CACLC,SAAS,G,EAGZC,gBAAkB,WACf,EAAKC,SAAS,CAACF,SAAU,EAAKD,MAAMC,SAAW,K,EAElDG,gBAAkB,WACf,EAAKD,SAAS,CAACF,SAAU,EAAKD,MAAMC,SAAW,K,wEAI/C,OAEG,yBAAKI,UAAU,oBACd,uBAAGC,KAAK,KAAI,yBAAKC,IAAI,uCAAuCC,IAAI,aAChE,6BACK,wBAAIH,UAAU,gBAAd,qBACA,uBAAGA,UAAU,sBAAb,iDACA,uBAAGA,UAAU,SAAb,SACA,uBAAGA,UAAU,SAAb,SACA,yBAAKA,UAAU,gBACf,4BAAQA,UAAU,gBAAgBI,QAASC,KAAKR,iBAAiB,0BAAMG,UAAU,uCACjF,4BAAQA,UAAU,gBAAgBI,QAASC,KAAKN,gBAAiBO,SAAkC,IAAxBD,KAAKV,MAAMC,UAAgB,0BAAMI,UAAU,sCACtH,2BAAOO,KAAK,SAASP,UAAU,WAAWQ,MAAOH,KAAKV,MAAMC,WAC5D,2BAAG,4BAAQI,UAAU,aAAlB,uB,GA1BQS,cCgCXC,E,2MA9BZf,MAAQ,CACLgB,KAAM,M,mFAGW,IAAD,OAChBC,MAAM,sCAAsC,CACzCC,QAAU,CACP,eAAgB,mBAChB,OAAU,sBAGfC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GAEJC,QAAQC,IAAIF,MAGdG,OAAM,SAACC,GAELH,QAAQG,MAAMA,MAEhBP,MAAK,SAAAH,GAAI,OAAI,EAAKb,SAAS,CAACa,c,+BAG7B,OACG,kBAAC,EAAD,U,GA1BiBF,a,MCONa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OAAO,kBAAC,EAAD,MAAiBC,SAASC,eAAe,SDuHnD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"static/js/main.8ae25eaf.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../styles/productCard.css';\r\n\r\n\r\nclass ProductCard extends Component {\r\n   state = {\r\n      quantity:0\r\n   }\r\n   \r\n   handleIncrement = () =>{\r\n      this.setState({quantity: this.state.quantity + 1});\r\n   }\r\n   handleDecrement = () =>{\r\n      this.setState({quantity: this.state.quantity - 1});\r\n   }\r\n\r\n   render(){\r\n      return(\r\n         \r\n         <div className=\"productContainer\">\r\n          <a href=\"#\"><img src=\"/ressources/images/address_plate.jpg\" alt=\"product\"/></a>\r\n          <div>\r\n               <h1 className=\"productTitle\">Home Adress Plate</h1>\r\n               <p className=\"productDescription\">LED 4 number home address plate for driveway.</p>\r\n               <p className=\"price\">25.69</p>\r\n               <p className=\"brand\">brand</p>\r\n               <div className=\"cartElements\">\r\n               <button className=\"incrementCart\" onClick={this.handleIncrement}><span className=\"glyphicon glyphicon-chevron-right\"></span></button>\r\n               <button className=\"decrementCart\" onClick={this.handleDecrement} disabled={this.state.quantity === 0}><span className=\"glyphicon glyphicon-chevron-left\"></span></button>\r\n               <input type=\"number\" className=\"numItems\" value={this.state.quantity}></input>\r\n               <p><button className=\"addToCart\">Add to Cart</button></p>\r\n               </div>\r\n\r\n            </div>\r\n\r\n         </div>\r\n   \r\n      )\r\n\r\n      \r\n   }\r\n   \r\n}\r\nexport default ProductCard;","\r\nimport React, {Component} from 'react';\r\nimport \"./styles/LandingPage.css\";\r\nimport ProductCard from \"./components/productCard\";\r\n\r\nclass LandingPage extends Component {\r\n   state = {\r\n      data: null\r\n   }\r\n\r\n   componentDidMount(){\r\n      fetch('http://localhost:3000/Products.json',{\r\n         headers : { \r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json'\r\n           }\r\n      })\r\n      .then(response => response.json())\r\n      .then((productData) => {\r\n         // jsonData is parsed json object received from url\r\n         console.log(productData)\r\n      })\r\n      \r\n      .catch((error) => {\r\n         // handle your errors here\r\n         console.error(error)\r\n      })\r\n      .then(data => this.setState({data}))\r\n   }\r\n   render(){\r\n      return(\r\n         <ProductCard/>\r\n      )\r\n   }\r\n}\r\n\r\nexport default LandingPage;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport LandingPage from './LandingPage';\nimport ProductCard from \"./components/productCard\"\nimport './styles/index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n//import Counters from \"./components/counters\";\n\n\nReactDOM.render(<LandingPage />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}